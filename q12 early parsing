class EarleyParser:
    def __init__(self, grammar):
        self.grammar = grammar

    def parse(self, sentence):
        # Initialize chart with lists for each position in the sentence
        chart = [[] for _ in range(len(sentence) + 1)]
        
        # Initialize Earley items for starting rule 'S' -> . NP VP
        self.predict(chart, 0, ('S', 'NP', 'VP'))
        
        # Process each position in the sentence
        for i in range(len(sentence) + 1):
            while True:
                added = False
                
                # Scan
                if i < len(sentence):
                    for state in chart[i]:
                        if not state.completed() and state.next() == sentence[i]:
                            new_state = state.advance()
                            self.add_state(chart, i + 1, new_state)
                            added = True
                
                # Complete
                for state in chart[i]:
                    if not state.completed():
                        continue
                    for completed_state in chart[state.origin]:
                        if completed_state.next() == state.name() and not completed_state.completed():
                            new_state = completed_state.advance()
                            self.add_state(chart, i, new_state)
                            added = True
                
                # Predict
                if not added:
                    break
        
        # Check if the goal state 'S -> NP VP .' is in the chart for the full sentence
        goal_state = ('S', 'NP', 'VP')
        return any(state == EarleyItem('S', ('NP', 'VP'), 0) for state in chart[len(sentence)])

    def add_state(self, chart, index, state):
        if state not in chart[index]:
            chart[index].append(state)

    def predict(self, chart, index, rule):
        lhs, rhs = rule[0], rule[1:]
        for production in self.grammar.get(lhs, []):
            self.add_state(chart, index, EarleyItem(lhs, production, index))

class EarleyItem:
    def __init__(self, name, production, origin):
        self.name = name
        self.production = production
        self.origin = origin
        self.current = 0

    def next(self):
        return self.production[self.current]

    def advance(self):
        new_state = EarleyItem(self.name, self.production, self.origin)
        new_state.current += 1
        return new_state

    def completed(self):
        return self.current == len(self.production)

    def __eq__(self, other):
        return self.name == other.name and self.production == other.production and self.origin == other.origin

    def __str__(self):
        production_str = ' '.join(self.production[:self.current] + ['â€¢'] + self.production[self.current:])
        return f'{self.name} -> {production_str} [{self.origin}]'

# Example usage
grammar = {
    'S': [('NP', 'VP')],
    'NP': [('Det', 'N')],
    'VP': [('V', 'NP')],
    'Det': ['the', 'a'],
    'N': ['dog', 'cat'],
    'V': ['chases', 'sees']
}

parser = EarleyParser(grammar)
sentence = ['the', 'dog', 'chases', 'a', 'cat']
result = parser.parse(sentence)

if result:
    print("Sentence is grammatically correct.")
else:
    print("Sentence is not grammatically correct.")
