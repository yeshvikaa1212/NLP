class ParseTreeNode:
    def __init__(self, symbol, children=None):
        self.symbol = symbol
        self.children = children if children else []

def generate_parse_tree(grammar, sentence):
    n = len(sentence)
    table = [[None] * (n + 1) for _ in range(n + 1)]

    for i in range(1, n + 1):
        for lhs in grammar.keys():
            if sentence[i - 1] in grammar[lhs]:
                table[i - 1][i] = ParseTreeNode(lhs, [ParseTreeNode(sentence[i - 1])])

    for length in range(2, n + 1):
        for begin in range(n - length + 1):
            end = begin + length
            for split in range(begin + 1, end):
                for lhs, rhs_list in grammar.items():
                    for rhs in rhs_list:
                        if len(rhs) == 2 and table[begin][split] and table[split][end]:
                            left, right = rhs
                            if (table[begin][split].symbol == left and
                                    table[split][end].symbol == right):
                                table[begin][end] = ParseTreeNode(lhs, [table[begin][split], table[split][end]])
                                break
                    if table[begin][end]:
                        break

    return table[0][n]

# Example usage
grammar = {
    'S': [['NP', 'VP']],
    'NP': [['Det', 'N'], ['N']],
    'VP': [['V', 'NP']],
    'Det': ['the', 'a'],
    'N': ['dog', 'cat'],
    'V': ['chases', 'sees']
}

sentence = ['the', 'dog', 'chases', 'a', 'cat']
parse_tree = generate_parse_tree(grammar, sentence)

# Function to print the parse tree recursively
def print_parse_tree(node, level=0):
    if node:
        print('    ' * level + str(node.symbol))
        for child in node.children:
            print_parse_tree(child, level + 1)

print("Parse Tree:")
print_parse_tree(parse_tree)
